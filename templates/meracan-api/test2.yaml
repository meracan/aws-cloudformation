AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  BucketName:
    Type: String
    Description: Name of Api role
  APILayer:
    Type: String
    
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-${BucketName}'
  
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-Pool'
  
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${AWS::StackName}-ClientName'
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  TableCas: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub '${AWS::StackName}-Cas'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes: 
        - IndexName: projectIndex
          KeySchema: 
          - AttributeName: projectId
            KeyType: HASH
          Projection:
            ProjectionType: ALL

  TableData: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub '${AWS::StackName}-Data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: type
          AttributeType: S          
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes: 
        - IndexName: projectIndex
          KeySchema: 
          - AttributeName: projectId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: typeIndex
          KeySchema: 
          - AttributeName: type
            KeyType: HASH
          Projection:
            ProjectionType: ALL

  PolicyAdmin:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-PolicyAdmin'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource: 
              - !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ListTagsOfResource'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:UpdateTable'
            Resource:
              - !GetAtt TableCas.Arn
              - !GetAtt TableData.Arn
          - Effect: Allow
            Action:
              - 'cognito-idp:*'
            Resource: !GetAtt UserPool.Arn     
  
  RoleApi:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-RoleApi'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: AssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'  
  RoleAdmin:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-RoleAdmin'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Ref PolicyAdmin
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-RoleApi'
            Service:
            - lambda.amazonaws.com
            - ec2.amazonaws.com
  GroupAdmin:
    Type: 'AWS::Cognito::UserPoolGroup'
    Properties:
      Description: Admin group
      GroupName: Admin
      UserPoolId: !Ref UserPool
      RoleArn: !GetAtt RoleAdmin.Arn
  
  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub '${AWS::StackName}-MyApi'
      StageName: Prod
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn     
      DefinitionBody:
        swagger: '2.0'
        info:
          title: TestAPI
        paths:
          /:
            get:
              produces:
              - application/json
              responses:
                '201':
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - MyCognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 201
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations'
            options:
              consumes:
              - application/json
              description: 'Enable CORS by returning correct headers'
              produces:
              - application/json
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - NONE: []
              summary: CORS support
              tags:
              - CORS
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
                    statusCode: '200'
                type: mock
            post:
              produces:
              - application/json
              responses:
                '201':
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - MyCognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 201
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations'
        
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
              gatewayresponse.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{"message":$context.error.messageString}'
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
              gatewayresponse.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{"message":$context.error.messageString}'
            
  MyFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3://meracan-templates/lambda/function/meracanapi.zip
      Handler: index.handler
      Layers:
        - !Ref APILayer
      MemorySize: 128
      Runtime: python3.8
      Timeout: 300
      Role: !GetAtt RoleApi.Arn
      
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /
            Method: GET
        Post:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /
            Method: POST
      Description: ''    



Outputs:
  USERPOOLID:
    Description: Cognito User Pool Id
    Value: !Ref UserPool
  USERPOOLCLIENTID:
    Description: Cognito User Pool Client Id
    Value: !Ref UserPoolClient
  USERPOOLARN:
    Description: Cognito User Pool Arn
    Value: !GetAtt UserPool.Arn
  S3BUCKET:
    Description: Bucket
    Value: !Ref S3Bucket
  TABLECAS:
    Description: Table
    Value: !Ref TableCas
  TABLEDATA:
    Description: Table
    Value: !Ref TableData  
  ROLEADMINARN:
    Description: Role Admin
    Value: !GetAtt RoleAdmin.Arn